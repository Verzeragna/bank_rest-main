openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8010/bankcards
    description: Generated server url
tags:
  - name: Card
    description: Card API
  - name: Authentication
    description: Authentication API
  - name: User
    description: User API
  - name: Card Balance
    description: Card Balance API
paths:
  /users:
    put:
      tags:
        - User
      summary: Update a user
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
        required: true
      responses:
        "200":
          description: Successfully updated user
        "400":
          description: Invalid input
        "404":
          description: User not found
    patch:
      tags:
        - User
      summary: Change user password
      operationId: changeUserPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPasswordDto"
        required: true
      responses:
        "200":
          description: Successfully changed password
        "400":
          description: Invalid input
        "404":
          description: User not found
  /users/registration:
    post:
      tags:
        - User
      summary: Register a new user
      operationId: userRegistration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistrationDto"
        required: true
      responses:
        "200":
          description: Successfully registered user
        "400":
          description: Invalid input
        "409":
          description: User already exists
  /users/create:
    post:
      tags:
        - User
      summary: Create a new user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreationDto"
        required: true
      responses:
        "200":
          description: Successfully created user
        "400":
          description: Invalid input
        "409":
          description: User already exists
  /users/cards/block:
    post:
      tags:
        - User
      summary: Block all cards for a user
      operationId: blockUserCards
      parameters:
        - name: userId
          in: query
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successfully blocked cards
        "404":
          description: User not found
  /cards/{id}/block:
    post:
      tags:
        - Card
      summary: Block a card
      operationId: blockCard
      parameters:
        - name: id
          in: path
          description: ID of the card
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successfully blocked card
        "404":
          description: Card not found
  /cards/{id}/block/request/create:
    post:
      tags:
        - Card
      summary: Create a block request for a card
      operationId: createCardBlockRequest
      parameters:
        - name: id
          in: path
          description: ID of the card
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successfully created block request
        "404":
          description: Card not found
        "403":
          description: Card not owned by user
  /cards/{id}/activate:
    post:
      tags:
        - Card
      summary: Activate a card
      operationId: activateCard
      parameters:
        - name: id
          in: path
          description: ID of the card
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successfully activated card
        "404":
          description: Card not found
  /cards/create:
    post:
      tags:
        - Card
      summary: Create a new card for a user
      operationId: createCardForUser
      parameters:
        - name: userId
          in: query
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successfully created card
        "400":
          description: Invalid input
  /cards/block/request/{id}/progress:
    post:
      tags:
        - Card
      summary: Set block request status to IN_PROGRESS
      operationId: setStatusBlockRequestInProgress
      parameters:
        - name: id
          in: path
          description: ID of the block request
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successfully updated status
        "404":
          description: Block request not found
  /cards/block/request/{id}/done:
    post:
      tags:
        - Card
      summary: Set block request status to DONE
      operationId: setStatusBlockRequestDone
      parameters:
        - name: id
          in: path
          description: ID of the block request
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successfully updated status
        "404":
          description: Block request not found
  /balance/transfer:
    post:
      tags:
        - Card Balance
      summary: Transfer money between cards
      operationId: transferMoney
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoneyTransferDto"
        required: true
      responses:
        "200":
          description: Successfully transferred money
        "400":
          description: Invalid input
        "404":
          description: Card not found
        "403":
          description: Card not owned by user
  /auth/authenticate:
    post:
      tags:
        - Authentication
      summary: Authenticate user and get JWT token
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationRequest"
        required: true
      responses:
        "200":
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JwtAuthenticationDto"
        "400":
          description: Invalid input
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/JwtAuthenticationDto"
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/JwtAuthenticationDto"
        "401":
          description: Incorrect password
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/JwtAuthenticationDto"
  /users/list:
    get:
      tags:
        - User
      summary: Get all users
      operationId: getAllUsers
      responses:
        "200":
          description: Successfully retrieved users
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDto"
  /cards:
    get:
      tags:
        - Card
      summary: Get all cards
      operationId: getAllCards
      responses:
        "200":
          description: Successfully retrieved cards
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AdminCardDto"
  /cards/view:
    get:
      tags:
        - Card
      summary: Get user cards with pagination
      operationId: getUserCards
      parameters:
        - name: search
          in: query
          description: Search term
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        "200":
          description: Successfully retrieved user cards
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PaginationDtoUserCardDto"
  /cards/block/request:
    get:
      tags:
        - Card
      summary: Get all block requests for a user
      operationId: getAllUserBlockRequest
      parameters:
        - name: userId
          in: query
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successfully retrieved block requests
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardBlockRequestDto"
  /users/{userId}:
    delete:
      tags:
        - User
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successfully deleted user
        "404":
          description: User not found
  /cards/{id}:
    delete:
      tags:
        - Card
      summary: Delete a card
      operationId: deleteCard
      parameters:
        - name: id
          in: path
          description: ID of the card
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successfully deleted card
        "404":
          description: Card not found
components:
  schemas:
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        lastName:
          type: string
        surname:
          type: string
        login:
          type: string
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - DELETED
        role:
          type: string
          enum:
            - ADMIN
            - USER
        createdAt:
          type: string
          format: date-time
      required:
        - createdAt
        - id
        - lastName
        - login
        - name
        - role
        - status
        - surname
    UserRegistrationDto:
      type: object
      properties:
        name:
          type: string
          maxLength: 50
          minLength: 0
        lastName:
          type: string
          maxLength: 50
          minLength: 0
        surname:
          type: string
          maxLength: 50
          minLength: 0
        login:
          type: string
          format: email
          maxLength: 50
          minLength: 0
        password:
          type: string
          maxLength: 12
          minLength: 8
      required:
        - lastName
        - login
        - name
        - password
        - surname
    UserCreationDto:
      type: object
      properties:
        name:
          type: string
          maxLength: 50
          minLength: 0
        lastName:
          type: string
          maxLength: 50
          minLength: 0
        surname:
          type: string
          maxLength: 50
          minLength: 0
        role:
          type: string
          enum:
            - ADMIN
            - USER
        login:
          type: string
          format: email
          maxLength: 50
          minLength: 0
        password:
          type: string
          maxLength: 12
          minLength: 8
      required:
        - lastName
        - login
        - name
        - password
        - role
        - surname
    MoneyTransferDto:
      type: object
      properties:
        cardFrom:
          type: string
          minLength: 1
        cardTo:
          type: string
          minLength: 1
        value:
          type: number
      required:
        - cardFrom
        - cardTo
        - value
    AuthenticationRequest:
      type: object
      properties:
        login:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1
      required:
        - login
        - password
    JwtAuthenticationDto:
      type: object
      properties:
        token:
          type: string
    UserPasswordDto:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        password:
          type: string
          maxLength: 12
          minLength: 8
      required:
        - password
        - userId
    AdminCardDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        number:
          type: string
        expireDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - EXPIRED
        balance:
          type: number
        ownerId:
          type: integer
          format: int64
    PaginationDtoUserCardDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        elements:
          type: array
          items:
            $ref: "#/components/schemas/UserCardDto"
    UserCardDto:
      type: object
      properties:
        number:
          type: string
        expireDate:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - EXPIRED
        balance:
          type: number
    CardBlockRequestDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        userName:
          type: string
        cardId:
          type: integer
          format: int64
        cardNumber:
          type: string
        createdAt:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - CREATED
            - IN_PROGRESS
            - DONE